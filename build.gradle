/*
 * Copyright 2025 Curity AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-library'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly 'se.curity.identityserver:identityserver.sdk:10.4.0'
    compileOnly 'org.slf4j:slf4j-api:2.0.12'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation("org.apache.commons:commons-lang3:3.0")
}

group = 'io.curity.identityserver.plugin'
version = '0.1.0'
description = 'Curity Service Status Checker Authentication Action'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


// Custom task for local deployment
tasks.register('deployToLocal', Sync) {
    description = 'Deploys the plugin JAR to the local Curity server'
    dependsOn jar

    if (!System.getenv('IDSVR_HOME')) {
        throw new GradleException('IDSVR_HOME environment variable must be set to deploy the plugin')
    }

    def pluginDir = file("${System.env.IDSVR_HOME}/usr/share/plugins/${project.group}.${project.name}")

    into pluginDir

    from(jar) {
        eachFile { file ->
            logger.info("Copying plugin JAR: ${file.path}")
        }
    }

    from(configurations.runtimeClasspath) {
        eachFile { file ->
            logger.info("Copying dependency JAR: ${file.path}")
        }
    }

    doFirst {
        logger.info('Starting deployToLocal task')
        logger.info("Target plugin directory: ${pluginDir.absolutePath}")
    }

    doLast {
        logger.lifecycle("Successfully deployed plugin and dependencies to ${getDestinationDir().absolutePath}")
        logger.info("Deployed artifacts:")
        getDestinationDir().eachFile { file ->
            logger.info("- ${file.name}")
        }
    }
}


// Custom task for creating release
tasks.register('createRelease', Sync) {
    description = 'Creates a release package with all necessary artifacts'
    dependsOn build, jar

    from configurations.runtimeClasspath
    from jar

    into layout.buildDirectory.dir('release')

    doFirst {
        logger.info('Starting createRelease task')
        logger.info("Release version: ${project.version}")
    }

    doLast {
        logger.lifecycle("Release package created at: ${destinationDir}")
        logger.info("Included artifacts:")
        destinationDir.eachFile { file ->
            logger.info("- ${file.name}")
        }
    }
}
